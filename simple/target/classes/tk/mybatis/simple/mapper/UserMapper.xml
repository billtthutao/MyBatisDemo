<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
	<resultMap type="tk.mybatis.simple.model.SysUser" id="userMap">
		<id property="id" column="id"/>
		<result property="userName" column="user_name"/>
		<result property="userPassword" column="user_password"/>
		<result property="userEmail" column="user_email"/>
		<result property="userInfo" column="user_info"/>
		<result property="headImg" column="head_img" jdbcType="BLOB"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
	</resultMap>
	
	<resultMap type="tk.mybatis.simple.model.SysUser" id="userRoleListMap" extends="userMap">
		<collection property="roleList" columnPrefix="role_"
					resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap">
		</collection>
	</resultMap>
	
	<resultMap type="tk.mybatis.simple.model.SysUser" id="userRolePrivilegeListMap" extends="userMap">
		<collection property="roleList" columnPrefix="role_"
					resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap">
		</collection>
	</resultMap>
	
	<resultMap type="tk.mybatis.simple.model.SysUser" id="userRoleMapSelect" extends="userMap">
	<!-- fetchType="lazy" will run association query only when the related column is accessed -->
		<association property="roleList" column="{id=role_id}" 
					fetchType="lazy"
					 select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById" />
	</resultMap>
	
	<resultMap type="tk.mybatis.simple.model.SysUser" id="userRolePrivilegeMapSelect" extends="userMap">
		<association property="roleList" column="userId=id"
					 fetchType="lazy" select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId">
		</association>
	</resultMap>
	
	<select id="selectById" resultMap="userMap">
		select * from sys_user where id = #{id}
	</select>
	
	<select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			   user_name userName,
			   user_password userPassword,
			   user_email userEmail,
			   user_info userInfo,
			   head_img headImg,
			   create_time createTime
		from sys_user
	</select>
	
	<select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
		select r.id,
			   r.role_name roleName,
			   r.enabled,
			   r.create_by createBy,
			   r.create_time createTime
		from sys_role r
		inner join sys_user_role ur on r.id = ur.role_id
		inner join sys_user u on u.id = ur.user_id
		where u.id = #{id}
	</select>
	
	<insert id="insert">
		insert into sys_user(
			id, user_name, user_password, user_email, user_info, head_img, create_time)
		values(
			#{id},
			#{userName},
			#{userPassword},
			#{userEmail},
			#{userInfo},
			#{headImg, jdbcType=BLOB},
			#{createTime, jdbcType=TIMESTAMP}
		)
	</insert>
	
	<insert id="insert2" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(
			user_name, user_password, 
			<if test="userEmail != null and userEmail != ''">
				user_email,
			</if> 
			user_info, head_img, create_time)
		values(
			#{userName},
			#{userPassword},
			<if test="userEmail != null and userEmail != ''">
				#{userEmail},
			</if> 
			#{userInfo},
			#{headImg, jdbcType=BLOB},
			#{createTime, jdbcType=TIMESTAMP}
		)
	</insert>
	
	<insert id="insert3">
		insert into sys_user(
			user_name, user_password, user_email, user_info, head_img, create_time)
		values(
			#{userName},
			#{userPassword},
			#{userEmail},
			#{userInfo},
			#{headImg, jdbcType=BLOB},
			#{createTime, jdbcType=TIMESTAMP}
		)
		<selectKey keyColumn="id" resultType="Long" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<update id="updateById">
		update sys_user
		set user_name = #{userName},
		    user_password = #{userPassword},
		    user_email = #{userEmail},
		    user_info = #{userInfo},
		    head_img = #{headImg, jdbcType=BLOB},
		    create_time = #{createTime, jdbcType=TIMESTAMP}
		where id = ${id}
	</update>
	
	<delete id="deleteById">
		delete from sys_user where id = #{id}
	</delete>
	
	<select id="selectRolesByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole">
		select r.id,
			   r.role_name roleName,
			   r.enabled,
			   r.create_by createBy,
			   r.create_time createTime
		from sys_role r
		inner join sys_user_role ur on r.id = ur.role_id
		inner join sys_user u on u.id = ur.user_id
		where u.id = #{userId}
		  and r.enabled = #{enabled}
	</select>
	
	<select id="selectRolesByUserBeanAndRoleBean" resultType="tk.mybatis.simple.model.SysRole">
		select r.id,
			   r.role_name roleName,
			   r.enabled,
			   r.create_by createBy,
			   r.create_time createTime
		from sys_role r
		inner join sys_user_role ur on r.id = ur.role_id
		inner join sys_user u on u.id = ur.user_id
		where u.id = #{sysUser.id}
		  and r.enabled = #{sysRole.enabled}
	</select>
	
	<select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			   user_name userName,
			   user_password userPassword,
			   user_email userEmail,
			   user_info userInfo,
			   head_img headImg,
			   create_time createTime
		from sys_user
		where 1=1
		<if test="userName != null and userName !=''">
			and user_name like concat('%', #{userName}, '%')
		</if>
		<if test="userEmail != null and userEmail !=''">
			and user_email = #{userEmail}
		</if>
	</select>
	
	<update id="updateByIdSelective">
		update sys_user set
		<if test="userName !=null and userName !=''">
			user_name = #{userName},
		</if>
		<if test="userPassword !=null and userPassword !=''">
			user_password = #{userPassword},
		</if>
		<if test="userEmail !=null and userEmail !=''">
			user_email = #{userEmail},
		</if>
		<if test="userInfo !=null and userInfo !=''">
			user_info = #{userInfo},
		</if>
		<if test="headImg !=null">
			head_img = #{headImg, jdbcType=BLOB},
		</if>
		<if test="createTime !=null">
			create_time = #{createTime, jdbcType=TIMESTAMP},
		</if>
		id = #{id}
		where id = #{id}
	</update>
	
	<select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			   user_name userName,
			   user_password userPassword,
			   user_email userEmail,
			   user_info userInfo,
			   head_img headImg,
			   create_time createTime
		from sys_user
		where 1=1
		<choose>
			<when test="id != null">
				and id = #{id}
			</when>
			<when test="userName != null and userName !=''">
				and user_name = #{userName}
			</when>
			<otherwise>
				and 1=2
			</otherwise>
		</choose>
	</select>
	
	<select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			   user_name userName,
			   user_password userPassword,
			   user_email userEmail,
			   user_info userInfo,
			   head_img headImg,
			   create_time createTime
		from sys_user
		where id in
		<foreach collection="list" open="(" close=")" separator="," item="id" index="i">
			#{id}	
		</foreach>
	</select>
	
	<select id="selectByIdList1" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			   user_name userName,
			   user_password userPassword,
			   user_email userEmail,
			   user_info userInfo,
			   head_img headImg,
			   create_time createTime
		from sys_user
		where id in
		<foreach collection="ids" open="(" close=")" separator="," item="id" index="i">
			#{id}	
		</foreach>
	</select>
	
	<select id="selectByIdList2" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			   user_name userName,
			   user_password userPassword,
			   user_email userEmail,
			   user_info userInfo,
			   head_img headImg,
			   create_time createTime
		from sys_user
		where id in
		<foreach collection="ids" open="(" close=")" separator="," item="id" index="i">
			#{id}	
		</foreach>
	</select>
	
	<insert id="insertByList" useGeneratedKeys = "true" keyProperty="id">
		insert into sys_user(user_name,user_password, user_email, user_info, head_img, create_time)
		values
		<foreach collection="list" separator="," item="user" index="i">
			(#{user.userName},#{user.userPassword},#{user.userEmail},#{user.userInfo},
			#{user.headImg, jdbcType=BLOB},#{user.createTime, jdbcType=TIMESTAMP})
		</foreach>
	</insert>
	
	<update id="updateByMap">
		update sys_user set
		<foreach collection="_parameter" item="val" index="key" separator=",">
			${key} = #{val}
		</foreach>
		where id = #{id}
	</update>
	
	<select id="selectUserAndRoldById" resultMap="userRoleListMap">
		select u.id,
			   u.user_name,
			   u.user_password,
			   u.user_email,
			   u.user_info,
			   u.head_img,
			   u.create_time,
			   r.id role_id,
			   r.role_name role_role_Name,
			   r.enabled role_enabled,
			   r.create_by role_create_by,
			   r.create_time role_create_time
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on r.id = ur.role_id
		where u.id = #{id}
	</select>
	
	<select id="selectAllUserAndRoles" resultMap="userRoleListMap">
		select u.id,
			   u.user_name,
			   u.user_password,
			   u.user_email,
			   u.user_info,
			   u.head_img,
			   u.create_time,
			   r.id role_id,
			   r.role_name role_role_Name,
			   r.enabled role_enabled,
			   r.create_by role_create_by,
			   r.create_time role_create_time
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on r.id = ur.role_id
	</select>
	
	<select id="selectUserAndRoleByidSelect" resultMap="userRoleMapSelect">
		select u.id,
			   u.user_name,
			   u.user_password,
			   u.user_email,
			   u.user_info,
			   u.head_img,
			   u.create_time,
			   ur.role_id
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		where u.id = #{id}
	</select>
	
	<select id="selectUserAndRoleAndPrivilegeByUseridSelect" resultMap="userRolePrivilegeMapSelect">
		select u.id,
			   u.user_name,
			   u.user_password,
			   u.user_info,
			   u.head_img,
			   u.create_time
		from sys_user u
		where u.id = #{id}
	</select>
	
	<select id="selectAllUserAndRoleAndPrivilegeSelect" resultMap="userRolePrivilegeMapSelect">
		select u.id,
			   u.user_name,
			   u.user_password,
			   u.user_info,
			   u.head_img,
			   u.create_time
		from sys_user u
	</select>
	
	<select id="selectUserAndRoldAndPrivilegeById" resultMap="userRolePrivilegeListMap">
		select u.id,
			   u.user_name,
			   u.user_password,
			   u.user_email,
			   u.user_info,
			   u.head_img,
			   u.create_time,
			   r.id role_id,
			   r.role_name role_role_Name,
			   r.enabled role_enabled,
			   r.create_by role_create_by,
			   r.create_time role_create_time,
			   <!-- The prefix MUST be prefix of ROLE + PRIVILEGE, so it should be role_privilege_ -->
			   p.id role_privilege_id,
			   p.privilege_name role_privilege_privilege_name,
			   p.privilege_url role_privilege_privilege_url
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on r.id = ur.role_id
		inner join sys_role_privilege rp on r.id = rp.role_id
		inner join sys_privilege p on rp.privilege_id = p.id
		where u.id = #{id}
	</select>
	
	<select id="selectAllUserAndRolesAndPrivileges" resultMap="userRolePrivilegeListMap">
		select u.id,
			   u.user_name,
			   u.user_password,
			   u.user_email,
			   u.user_info,
			   u.head_img,
			   u.create_time,
			   r.id role_id,
			   r.role_name role_role_Name,
			   r.enabled role_enabled,
			   r.create_by role_create_by,
			   r.create_time role_create_time,
			   p.id role_privilege_id,
			   p.privilege_name role_privilege_privilege_name,
			   p.privilege_url role_privilege_privilege_url
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on r.id = ur.role_id
		inner join sys_role_privilege rp on r.id = rp.role_id
		inner join sys_privilege p on rp.privilege_id = p.id
	</select>
</mapper>